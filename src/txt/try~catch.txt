必ず実行する処理の記述(try..catch..finally)

tryブロックの中で例外が発生すると残りの処理は行われずにcatchブロックへ処理が移ります。次の例を見てください。

try{
  実行する文1;
  実行する文2;
  実行する文3;
}
catch (例外クラス 変数名){
  例外が発生した時に実行する文;
}
tryブロックの中で例外が発生しなければ「実行する文1」「実行する文2」「実行する文3」と順に実行しtry文の次へ処理が移ります。それに対して例えば「実行する文1」「実行する文2」と実行してここで例外が発生した場合にひあ「実行する文3」は実行されずにcatchブロックへ処理が移ります。(そして例外の種類がcatchのところに書かれた例外だった場合にはcatchブロック内の処理が実行されます)。

このようにtryブロックの中の処理は実行されたりされなかったりする可能性があるのですけど、try文を終了する前に必ず実行させたい処理があった場合にはfinallyを使用して記述することが可能です。具体的には次のように記述します。

try{
  例外が発生しているかどうか調べる文1;
  例外が発生しているかどうか調べる文2;
  ...
}
catch (例外クラス1 変数名1){
  例外クラス1の例外が発生した時に行う文;
  ...
}
catch (例外クラス2 変数名2){
  例外クラス2の例外が発生した時に行う文;
  ...
}
finally {
  例外が発生するしないに関わらず実行する文;
  ...
}
finallyの後の「{」から「}」までのブロックに記述された処理は、try文の中で例外が発生してもしなくても必ず実行されます。その為、必ず行っておきたい処理がある場合にはfinallyブロックを用意してブロック内に記述するようにして下さい。